#!/bin/bash

export LANG=C

declare -r __LOGGER_VERSION__='1.0'
declare log_no_timestamp=""
declare log_no_loglevel=""
declare log_no_stacktrace=""

if [ "${0}" == "${BASH_SOURCE[0]}" ] ; then
  echo "This script must be sourced, not executed." >&2
  exit 1
fi

create_stacktrace () {
  # Loop through array
  for func in "$@"; do
    # Build trace appent func before last func
    local trace="${func:+".$(/bin/echo $func|/usr/bin/awk '{print $2}')"}${trace}"
  done

  # concatenate string with ScriptName.trace:LineNr
  __STACK__="\"stacktrace\": \"at $(/usr/bin/basename $0)$trace:$(/bin/echo ${functions[0]}|/usr/bin/awk '{print $1}')\""
}

log () {
  local log_message="\"message\": \"${2:-"No log message provided!"}\""

  # If var log_no_loglevel not set use log level
  if [[ -z ${log_no_loglevel// } ]]; then
    local log_level="${1:-"warn"} "
  else
    local log_level="log_no_loglevel"
  fi

  # If var log_no_timestamp not set use timestamp
  if [[ -z ${log_no_timestamp// } ]]; then
    local log_timestamp="\"timestamp\": \"$(date +'%F %H:%M:%S.%3N')\""
  fi

  case ${log_level// } in
    trace)
      # Create Arry with "LineNr FuncName ScriptName"
      readarray -t functions < <(local frame=0; while caller $frame; do ((frame++)); done)
      create_stacktrace "${functions[@]}"

      log_level="\"loglevel\": \"trace\""
      ;;
    debug)
      log_level="\"loglevel\": \"debug\""
      ;;
    info)
      log_level="\"loglevel\": \"info\""
      ;;
    warn)
      log_level="\"loglevel\": \"warn\""
      ;;
    error)
      log_level="\"loglevel\": \"error\""
      ;;
    fatal)
      log_level="\"loglevel\": \"fatal\""
      ;;
    log_no_loglevel)
      unset log_level
      ;;
    *)
      log_message="\"message\": \"No log level like ${1}\""
      log_level="\"loglevel\": \"error\""
      local json_msg_string="{ "
      for var in "${log_timestamp}" "${log_level}" "${log_message}"; do
        # If varable var not empty
        if [[ ! -z "${var// }" ]]; then
          json_msg_string+="${var},"
        fi
      done

      # Remove last comma
      json_msg_string=${json_msg_string%,*}
      json_msg_string+=" }"
      printf "${json_msg_string}\n"
      ;;
  esac

  # Print log message
  local json_msg_string="{ "
  for var in "${log_timestamp}" "${log_level}" "${__STACK__}" "${log_message}"; do
    # If varable var not empty
    if [[ ! -z "${var// }" ]]; then
      json_msg_string+="${var},"
    fi
  done

  # Remove last comma
  json_msg_string=${json_msg_string%,*}
  json_msg_string+=" }"
  printf "${json_msg_string}\n"

  unset __STACK__
  unset json_msg_string
}
